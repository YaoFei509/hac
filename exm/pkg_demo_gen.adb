--  Testing library-level packages.
--  We create the packages for Pkg_Demo.

with HAL;

procedure Pkg_Demo_Gen is

  --  This type controls the location of WITH's in
  --  packages further in the dependency tree.
  --
  type Test_Mode is (all_in_spec, mixed, all_in_bodies);

  use HAL;

  max_depth : constant := 2;

  procedure Generate (prefix : VString; depth : Natural; mode : Test_Mode) is
    f : File_Type;
    name : constant VString := "X_Pkg_Demo_" & prefix;
    file_name : constant VString := To_Lower (name);
    subtype Child_Range is Integer range 1 .. 3;
    with_in_spec : array (Child_Range) of Boolean;
    any_with : Boolean;
  begin
    for child in Child_Range loop
      case mode is
        when all_in_spec   => with_in_spec (child) := True;
        when mixed         => with_in_spec (child) := Rnd > 0.5;
        when all_in_bodies => with_in_spec (child) := False;
      end case;
    end loop;
    --
    for is_body in Boolean loop
      if is_body then
        Create (f, file_name & ".adb");
      else
        Create (f, file_name & ".ads");
      end if;
      Put_Line (f, "--  File generated by Pkg_Demo_Gen. This is needed for Pkg_Demo.");
      Put_Line (f, "--");
      New_Line (f);
      any_with := False;
      if depth < max_depth then
        for child in Child_Range loop
          if is_body xor with_in_spec (child) then
            Put_Line (f, "with " & name & Image (child) & ';');
            any_with := True;
          end if;
        end loop;
      end if;
      if is_body then
        Put_Line (f, "with HAL; use HAL;");
        any_with := True;
      end if;
      if any_with then
        New_Line (f);
      end if;
      Put (f, "package ");
      if is_body then
        Put (f, "body ");
      end if;
      Put_Line (f, name & " is");
      New_Line (f);
      Put (f, "  procedure Do_it");
      if is_body then
        Put_Line (f, "  is");
        Put_Line (f, "  begin");
        Put_Line (f, "    Put (+""[" & prefix & "]"");");
        if depth < max_depth then
          --  Now the funny part...
          for child in Child_Range loop
            Put_Line (f, "    " & name & Image (child) & ".Do_it;");
          end loop;
        end if;
        Put_Line (f, "  end Do_it;");
      else
        Put_Line (f, ';');
      end if;
      New_Line (f);
      Put_Line (f, "end " & name & ';');
      Close (f);
      --
      if depth < max_depth then
        --  Now the funny part...
        for child in Child_Range loop
          Generate (prefix & Image (child), depth + 1, mode);
        end loop;
      end if;
    end loop;
  end Generate;

  abbr : array (Test_Mode) of Character;

begin
  abbr (all_in_spec)   := 'S';
  abbr (mixed)         := 'M';
  abbr (all_in_bodies) := 'B';

  for mode in Test_Mode loop
    Generate (+abbr (mode), 0, mode);
  end loop;
end Pkg_Demo_Gen;
